//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeContext {

    public TimeEntity previousTickCountEntity { get { return GetGroup(TimeMatcher.PreviousTickCount).GetSingleEntity(); } }
    public PreviousTickCountComponent previousTickCount { get { return previousTickCountEntity.previousTickCount; } }
    public bool hasPreviousTickCount { get { return previousTickCountEntity != null; } }

    public TimeEntity SetPreviousTickCount(int newValue) {
        if (hasPreviousTickCount) {
            throw new Entitas.EntitasException("Could not set PreviousTickCount!\n" + this + " already has an entity with PreviousTickCountComponent!",
                "You should check if the context already has a previousTickCountEntity before setting it or use context.ReplacePreviousTickCount().");
        }
        var entity = CreateEntity();
        entity.AddPreviousTickCount(newValue);
        return entity;
    }

    public void ReplacePreviousTickCount(int newValue) {
        var entity = previousTickCountEntity;
        if (entity == null) {
            entity = SetPreviousTickCount(newValue);
        } else {
            entity.ReplacePreviousTickCount(newValue);
        }
    }

    public void RemovePreviousTickCount() {
        previousTickCountEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeEntity {

    public PreviousTickCountComponent previousTickCount { get { return (PreviousTickCountComponent)GetComponent(TimeComponentsLookup.PreviousTickCount); } }
    public bool hasPreviousTickCount { get { return HasComponent(TimeComponentsLookup.PreviousTickCount); } }

    public void AddPreviousTickCount(int newValue) {
        var index = TimeComponentsLookup.PreviousTickCount;
        var component = (PreviousTickCountComponent)CreateComponent(index, typeof(PreviousTickCountComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePreviousTickCount(int newValue) {
        var index = TimeComponentsLookup.PreviousTickCount;
        var component = (PreviousTickCountComponent)CreateComponent(index, typeof(PreviousTickCountComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePreviousTickCount() {
        RemoveComponent(TimeComponentsLookup.PreviousTickCount);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TimeMatcher {

    static Entitas.IMatcher<TimeEntity> _matcherPreviousTickCount;

    public static Entitas.IMatcher<TimeEntity> PreviousTickCount {
        get {
            if (_matcherPreviousTickCount == null) {
                var matcher = (Entitas.Matcher<TimeEntity>)Entitas.Matcher<TimeEntity>.AllOf(TimeComponentsLookup.PreviousTickCount);
                matcher.componentNames = TimeComponentsLookup.componentNames;
                _matcherPreviousTickCount = matcher;
            }

            return _matcherPreviousTickCount;
        }
    }
}

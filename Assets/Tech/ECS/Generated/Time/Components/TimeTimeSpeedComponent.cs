//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeContext {

    public TimeEntity timeSpeedEntity { get { return GetGroup(TimeMatcher.TimeSpeed).GetSingleEntity(); } }
    public TimeSpeedComponent timeSpeed { get { return timeSpeedEntity.timeSpeed; } }
    public bool hasTimeSpeed { get { return timeSpeedEntity != null; } }

    public TimeEntity SetTimeSpeed(float newValue) {
        if (hasTimeSpeed) {
            throw new Entitas.EntitasException("Could not set TimeSpeed!\n" + this + " already has an entity with TimeSpeedComponent!",
                "You should check if the context already has a timeSpeedEntity before setting it or use context.ReplaceTimeSpeed().");
        }
        var entity = CreateEntity();
        entity.AddTimeSpeed(newValue);
        return entity;
    }

    public void ReplaceTimeSpeed(float newValue) {
        var entity = timeSpeedEntity;
        if (entity == null) {
            entity = SetTimeSpeed(newValue);
        } else {
            entity.ReplaceTimeSpeed(newValue);
        }
    }

    public void RemoveTimeSpeed() {
        timeSpeedEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeEntity {

    public TimeSpeedComponent timeSpeed { get { return (TimeSpeedComponent)GetComponent(TimeComponentsLookup.TimeSpeed); } }
    public bool hasTimeSpeed { get { return HasComponent(TimeComponentsLookup.TimeSpeed); } }

    public void AddTimeSpeed(float newValue) {
        var index = TimeComponentsLookup.TimeSpeed;
        var component = (TimeSpeedComponent)CreateComponent(index, typeof(TimeSpeedComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTimeSpeed(float newValue) {
        var index = TimeComponentsLookup.TimeSpeed;
        var component = (TimeSpeedComponent)CreateComponent(index, typeof(TimeSpeedComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTimeSpeed() {
        RemoveComponent(TimeComponentsLookup.TimeSpeed);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TimeMatcher {

    static Entitas.IMatcher<TimeEntity> _matcherTimeSpeed;

    public static Entitas.IMatcher<TimeEntity> TimeSpeed {
        get {
            if (_matcherTimeSpeed == null) {
                var matcher = (Entitas.Matcher<TimeEntity>)Entitas.Matcher<TimeEntity>.AllOf(TimeComponentsLookup.TimeSpeed);
                matcher.componentNames = TimeComponentsLookup.componentNames;
                _matcherTimeSpeed = matcher;
            }

            return _matcherTimeSpeed;
        }
    }
}

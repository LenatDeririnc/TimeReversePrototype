//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeContext {

    public TimeEntity smoothRewindSpeedEntity { get { return GetGroup(TimeMatcher.SmoothRewindSpeed).GetSingleEntity(); } }
    public SmoothRewindSpeedComponent smoothRewindSpeed { get { return smoothRewindSpeedEntity.smoothRewindSpeed; } }
    public bool hasSmoothRewindSpeed { get { return smoothRewindSpeedEntity != null; } }

    public TimeEntity SetSmoothRewindSpeed(float newValue) {
        if (hasSmoothRewindSpeed) {
            throw new Entitas.EntitasException("Could not set SmoothRewindSpeed!\n" + this + " already has an entity with SmoothRewindSpeedComponent!",
                "You should check if the context already has a smoothRewindSpeedEntity before setting it or use context.ReplaceSmoothRewindSpeed().");
        }
        var entity = CreateEntity();
        entity.AddSmoothRewindSpeed(newValue);
        return entity;
    }

    public void ReplaceSmoothRewindSpeed(float newValue) {
        var entity = smoothRewindSpeedEntity;
        if (entity == null) {
            entity = SetSmoothRewindSpeed(newValue);
        } else {
            entity.ReplaceSmoothRewindSpeed(newValue);
        }
    }

    public void RemoveSmoothRewindSpeed() {
        smoothRewindSpeedEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TimeEntity {

    public SmoothRewindSpeedComponent smoothRewindSpeed { get { return (SmoothRewindSpeedComponent)GetComponent(TimeComponentsLookup.SmoothRewindSpeed); } }
    public bool hasSmoothRewindSpeed { get { return HasComponent(TimeComponentsLookup.SmoothRewindSpeed); } }

    public void AddSmoothRewindSpeed(float newValue) {
        var index = TimeComponentsLookup.SmoothRewindSpeed;
        var component = (SmoothRewindSpeedComponent)CreateComponent(index, typeof(SmoothRewindSpeedComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceSmoothRewindSpeed(float newValue) {
        var index = TimeComponentsLookup.SmoothRewindSpeed;
        var component = (SmoothRewindSpeedComponent)CreateComponent(index, typeof(SmoothRewindSpeedComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveSmoothRewindSpeed() {
        RemoveComponent(TimeComponentsLookup.SmoothRewindSpeed);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TimeMatcher {

    static Entitas.IMatcher<TimeEntity> _matcherSmoothRewindSpeed;

    public static Entitas.IMatcher<TimeEntity> SmoothRewindSpeed {
        get {
            if (_matcherSmoothRewindSpeed == null) {
                var matcher = (Entitas.Matcher<TimeEntity>)Entitas.Matcher<TimeEntity>.AllOf(TimeComponentsLookup.SmoothRewindSpeed);
                matcher.componentNames = TimeComponentsLookup.componentNames;
                _matcherSmoothRewindSpeed = matcher;
            }

            return _matcherSmoothRewindSpeed;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MonoGameObjectEntityComponent monoGameObjectEntity { get { return (MonoGameObjectEntityComponent)GetComponent(GameComponentsLookup.MonoGameObjectEntity); } }
    public bool hasMonoGameObjectEntity { get { return HasComponent(GameComponentsLookup.MonoGameObjectEntity); } }

    public void AddMonoGameObjectEntity(ECS.Mono.MonoGameObjectEntity newValue) {
        var index = GameComponentsLookup.MonoGameObjectEntity;
        var component = (MonoGameObjectEntityComponent)CreateComponent(index, typeof(MonoGameObjectEntityComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMonoGameObjectEntity(ECS.Mono.MonoGameObjectEntity newValue) {
        var index = GameComponentsLookup.MonoGameObjectEntity;
        var component = (MonoGameObjectEntityComponent)CreateComponent(index, typeof(MonoGameObjectEntityComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMonoGameObjectEntity() {
        RemoveComponent(GameComponentsLookup.MonoGameObjectEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMonoGameObjectEntity;

    public static Entitas.IMatcher<GameEntity> MonoGameObjectEntity {
        get {
            if (_matcherMonoGameObjectEntity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MonoGameObjectEntity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMonoGameObjectEntity = matcher;
            }

            return _matcherMonoGameObjectEntity;
        }
    }
}
